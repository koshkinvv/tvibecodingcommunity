import { storage } from "./storage";

if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.warn("TELEGRAM_BOT_TOKEN not found. Telegram bot functionality will be disabled.");
}

export class TelegramBot {
  private token: string;
  private apiUrl: string;

  constructor() {
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      throw new Error("TELEGRAM_BOT_TOKEN environment variable is required");
    }
    this.token = process.env.TELEGRAM_BOT_TOKEN;
    this.apiUrl = `https://api.telegram.org/bot${this.token}`;
  }

  async sendMessage(chatId: string, text: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.apiUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: 'HTML'
        }),
      });

      const data = await response.json();
      return data.ok;
    } catch (error) {
      console.error('Error sending Telegram message:', error);
      return false;
    }
  }

  async handleWebhook(update: any): Promise<void> {
    try {
      const message = update.message;
      if (!message || !message.text) return;

      const chatId = message.chat.id.toString();
      const username = message.from.username;
      const text = message.text.trim();

      console.log(`Telegram message from @${username} (${chatId}): ${text}`);

      if (text === '/start') {
        await this.handleStartCommand(chatId, username);
      }
    } catch (error) {
      console.error('Error handling Telegram webhook:', error);
    }
  }

  private async handleStartCommand(chatId: string, username: string): Promise<void> {
    if (!username) {
      await this.sendMessage(chatId, 
        '‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n' +
        '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Vibe Coding –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.\n\n' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      );
      return;
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram username
    const users = await storage.getUsers();
    const user = users.find(u => u.telegramUsername === username);

    if (!user) {
      await this.sendMessage(chatId,
        '‚ùå <b>Telegram username –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n' +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username @${username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n\n` +
        'üìù <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n' +
        '1. –ó–∞–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Å–∞–π—Ç–µ Vibe Coding\n' +
        '2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "Telegram"\n' +
        '3. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Telegram username (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @)\n' +
        '4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n' +
        '5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start —Å–Ω–æ–≤–∞\n\n' +
        'üí° <b>–í–∞–∂–Ω–æ:</b> Username –¥–æ–ª–∂–µ–Ω —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω –≤ –≤–∞—à–µ–º Telegram –ø—Ä–æ—Ñ–∏–ª–µ'
      );
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
    await storage.updateUser(user.id, {
      telegramId: chatId,
      telegramConnected: true
    });

    await this.sendMessage(chatId,
      'üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Vibe Coding!</b>\n\n' +
      `–ü—Ä–∏–≤–µ—Ç, ${user.name || user.username}! –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n\n` +
      'üì¢ <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>\n' +
      '‚Ä¢ –í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞\n' +
      '‚Ä¢ –ê–Ω–æ–Ω—Å—ã –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Å—Ç–∞—Ç–µ–π\n' +
      '‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≤–µ–±–∏–Ω–∞—Ä—ã\n' +
      '‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è\n\n' +
      '‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ.\n\n' +
      'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!'
    );

    console.log(`Successfully connected Telegram account for user ${user.username} (@${username})`);
  }

  async sendCommunityAnnouncement(message: string, userIds?: number[]): Promise<void> {
    try {
      const users = userIds 
        ? await Promise.all(userIds.map(id => storage.getUser(id)))
        : await storage.getUsers();

      const telegramUsers = users.filter(user => 
        user && 
        user.telegramConnected && 
        user.telegramId && 
        user.notificationPreference !== 'none'
      );

      console.log(`Sending announcement to ${telegramUsers.length} Telegram users`);

      for (const user of telegramUsers) {
        if (user.telegramId) {
          await this.sendMessage(user.telegramId, message);
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }
    } catch (error) {
      console.error('Error sending community announcement:', error);
    }
  }
}

export const telegramBot = process.env.TELEGRAM_BOT_TOKEN ? new TelegramBot() : null;